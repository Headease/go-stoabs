// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package stoabs is a generated GoMock package.
package stoabs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKVStore is a mock of KVStore interface.
type MockKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreMockRecorder
}

// MockKVStoreMockRecorder is the mock recorder for MockKVStore.
type MockKVStoreMockRecorder struct {
	mock *MockKVStore
}

// NewMockKVStore creates a new mock instance.
func NewMockKVStore(ctrl *gomock.Controller) *MockKVStore {
	mock := &MockKVStore{ctrl: ctrl}
	mock.recorder = &MockKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVStore) EXPECT() *MockKVStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKVStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKVStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKVStore)(nil).Close))
}

// Read mocks base method.
func (m *MockKVStore) Read(fn func(ReadTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockKVStoreMockRecorder) Read(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockKVStore)(nil).Read), fn)
}

// ReadShelf mocks base method.
func (m *MockKVStore) ReadShelf(shelfName string, fn func(Reader) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadShelf", shelfName, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadShelf indicates an expected call of ReadShelf.
func (mr *MockKVStoreMockRecorder) ReadShelf(shelfName, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadShelf", reflect.TypeOf((*MockKVStore)(nil).ReadShelf), shelfName, fn)
}

// Write mocks base method.
func (m *MockKVStore) Write(fn func(WriteTx) error, opts ...TxOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fn}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Write", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockKVStoreMockRecorder) Write(fn interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fn}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockKVStore)(nil).Write), varargs...)
}

// WriteShelf mocks base method.
func (m *MockKVStore) WriteShelf(shelfName string, fn func(Writer) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteShelf", shelfName, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteShelf indicates an expected call of WriteShelf.
func (mr *MockKVStoreMockRecorder) WriteShelf(shelfName, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteShelf", reflect.TypeOf((*MockKVStore)(nil).WriteShelf), shelfName, fn)
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockReader) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReaderMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReader)(nil).Get), key)
}

// Stats mocks base method.
func (m *MockReader) Stats() ShelfStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(ShelfStats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockReaderMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockReader)(nil).Stats))
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockWriter) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWriterMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriter)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockWriter) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWriterMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWriter)(nil).Get), key)
}

// Put mocks base method.
func (m *MockWriter) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockWriterMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockWriter)(nil).Put), key, value)
}

// Stats mocks base method.
func (m *MockWriter) Stats() ShelfStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(ShelfStats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockWriterMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockWriter)(nil).Stats))
}

// MockCursor is a mock of Cursor interface.
type MockCursor struct {
	ctrl     *gomock.Controller
	recorder *MockCursorMockRecorder
}

// MockCursorMockRecorder is the mock recorder for MockCursor.
type MockCursorMockRecorder struct {
	mock *MockCursor
}

// NewMockCursor creates a new mock instance.
func NewMockCursor(ctrl *gomock.Controller) *MockCursor {
	mock := &MockCursor{ctrl: ctrl}
	mock.recorder = &MockCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCursor) EXPECT() *MockCursorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockCursor) Next() ([]byte, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockCursorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockCursor)(nil).Next))
}

// Seek mocks base method.
func (m *MockCursor) Seek(seek []byte) ([]byte, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", seek)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockCursorMockRecorder) Seek(seek interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockCursor)(nil).Seek), seek)
}

// MockIterableKVStore is a mock of IterableKVStore interface.
type MockIterableKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockIterableKVStoreMockRecorder
}

// MockIterableKVStoreMockRecorder is the mock recorder for MockIterableKVStore.
type MockIterableKVStoreMockRecorder struct {
	mock *MockIterableKVStore
}

// NewMockIterableKVStore creates a new mock instance.
func NewMockIterableKVStore(ctrl *gomock.Controller) *MockIterableKVStore {
	mock := &MockIterableKVStore{ctrl: ctrl}
	mock.recorder = &MockIterableKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterableKVStore) EXPECT() *MockIterableKVStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIterableKVStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIterableKVStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIterableKVStore)(nil).Close))
}

// Read mocks base method.
func (m *MockIterableKVStore) Read(fn func(ReadTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockIterableKVStoreMockRecorder) Read(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIterableKVStore)(nil).Read), fn)
}

// ReadIterable mocks base method.
func (m *MockIterableKVStore) ReadIterable(fn func(IterableReadTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadIterable", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadIterable indicates an expected call of ReadIterable.
func (mr *MockIterableKVStoreMockRecorder) ReadIterable(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIterable", reflect.TypeOf((*MockIterableKVStore)(nil).ReadIterable), fn)
}

// ReadShelf mocks base method.
func (m *MockIterableKVStore) ReadShelf(shelfName string, fn func(Reader) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadShelf", shelfName, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadShelf indicates an expected call of ReadShelf.
func (mr *MockIterableKVStoreMockRecorder) ReadShelf(shelfName, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadShelf", reflect.TypeOf((*MockIterableKVStore)(nil).ReadShelf), shelfName, fn)
}

// Write mocks base method.
func (m *MockIterableKVStore) Write(fn func(WriteTx) error, opts ...TxOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fn}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Write", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockIterableKVStoreMockRecorder) Write(fn interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fn}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIterableKVStore)(nil).Write), varargs...)
}

// WriteShelf mocks base method.
func (m *MockIterableKVStore) WriteShelf(shelfName string, fn func(Writer) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteShelf", shelfName, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteShelf indicates an expected call of WriteShelf.
func (mr *MockIterableKVStoreMockRecorder) WriteShelf(shelfName, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteShelf", reflect.TypeOf((*MockIterableKVStore)(nil).WriteShelf), shelfName, fn)
}

// MockIterableReader is a mock of IterableReader interface.
type MockIterableReader struct {
	ctrl     *gomock.Controller
	recorder *MockIterableReaderMockRecorder
}

// MockIterableReaderMockRecorder is the mock recorder for MockIterableReader.
type MockIterableReaderMockRecorder struct {
	mock *MockIterableReader
}

// NewMockIterableReader creates a new mock instance.
func NewMockIterableReader(ctrl *gomock.Controller) *MockIterableReader {
	mock := &MockIterableReader{ctrl: ctrl}
	mock.recorder = &MockIterableReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterableReader) EXPECT() *MockIterableReaderMockRecorder {
	return m.recorder
}

// Cursor mocks base method.
func (m *MockIterableReader) Cursor() (Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cursor")
	ret0, _ := ret[0].(Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cursor indicates an expected call of Cursor.
func (mr *MockIterableReaderMockRecorder) Cursor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cursor", reflect.TypeOf((*MockIterableReader)(nil).Cursor))
}

// Get mocks base method.
func (m *MockIterableReader) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIterableReaderMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIterableReader)(nil).Get), key)
}

// Stats mocks base method.
func (m *MockIterableReader) Stats() ShelfStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(ShelfStats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockIterableReaderMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockIterableReader)(nil).Stats))
}

// MockIterableReadTx is a mock of IterableReadTx interface.
type MockIterableReadTx struct {
	ctrl     *gomock.Controller
	recorder *MockIterableReadTxMockRecorder
}

// MockIterableReadTxMockRecorder is the mock recorder for MockIterableReadTx.
type MockIterableReadTxMockRecorder struct {
	mock *MockIterableReadTx
}

// NewMockIterableReadTx creates a new mock instance.
func NewMockIterableReadTx(ctrl *gomock.Controller) *MockIterableReadTx {
	mock := &MockIterableReadTx{ctrl: ctrl}
	mock.recorder = &MockIterableReadTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterableReadTx) EXPECT() *MockIterableReadTxMockRecorder {
	return m.recorder
}

// FromIterableShelf mocks base method.
func (m *MockIterableReadTx) FromIterableShelf(shelfName string) (IterableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromIterableShelf", shelfName)
	ret0, _ := ret[0].(IterableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromIterableShelf indicates an expected call of FromIterableShelf.
func (mr *MockIterableReadTxMockRecorder) FromIterableShelf(shelfName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromIterableShelf", reflect.TypeOf((*MockIterableReadTx)(nil).FromIterableShelf), shelfName)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// MockTxOption is a mock of TxOption interface.
type MockTxOption struct {
	ctrl     *gomock.Controller
	recorder *MockTxOptionMockRecorder
}

// MockTxOptionMockRecorder is the mock recorder for MockTxOption.
type MockTxOptionMockRecorder struct {
	mock *MockTxOption
}

// NewMockTxOption creates a new mock instance.
func NewMockTxOption(ctrl *gomock.Controller) *MockTxOption {
	mock := &MockTxOption{ctrl: ctrl}
	mock.recorder = &MockTxOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxOption) EXPECT() *MockTxOptionMockRecorder {
	return m.recorder
}

// MockWriteTx is a mock of WriteTx interface.
type MockWriteTx struct {
	ctrl     *gomock.Controller
	recorder *MockWriteTxMockRecorder
}

// MockWriteTxMockRecorder is the mock recorder for MockWriteTx.
type MockWriteTxMockRecorder struct {
	mock *MockWriteTx
}

// NewMockWriteTx creates a new mock instance.
func NewMockWriteTx(ctrl *gomock.Controller) *MockWriteTx {
	mock := &MockWriteTx{ctrl: ctrl}
	mock.recorder = &MockWriteTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteTx) EXPECT() *MockWriteTxMockRecorder {
	return m.recorder
}

// GetShelfReader mocks base method.
func (m *MockWriteTx) GetShelfReader(shelfName string) (Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShelfReader", shelfName)
	ret0, _ := ret[0].(Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShelfReader indicates an expected call of GetShelfReader.
func (mr *MockWriteTxMockRecorder) GetShelfReader(shelfName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShelfReader", reflect.TypeOf((*MockWriteTx)(nil).GetShelfReader), shelfName)
}

// GetShelfWriter mocks base method.
func (m *MockWriteTx) GetShelfWriter(shelfName string) (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShelfWriter", shelfName)
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShelfWriter indicates an expected call of GetShelfWriter.
func (mr *MockWriteTxMockRecorder) GetShelfWriter(shelfName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShelfWriter", reflect.TypeOf((*MockWriteTx)(nil).GetShelfWriter), shelfName)
}

// MockReadTx is a mock of ReadTx interface.
type MockReadTx struct {
	ctrl     *gomock.Controller
	recorder *MockReadTxMockRecorder
}

// MockReadTxMockRecorder is the mock recorder for MockReadTx.
type MockReadTxMockRecorder struct {
	mock *MockReadTx
}

// NewMockReadTx creates a new mock instance.
func NewMockReadTx(ctrl *gomock.Controller) *MockReadTx {
	mock := &MockReadTx{ctrl: ctrl}
	mock.recorder = &MockReadTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadTx) EXPECT() *MockReadTxMockRecorder {
	return m.recorder
}

// GetShelfReader mocks base method.
func (m *MockReadTx) GetShelfReader(shelfName string) (Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShelfReader", shelfName)
	ret0, _ := ret[0].(Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShelfReader indicates an expected call of GetShelfReader.
func (mr *MockReadTxMockRecorder) GetShelfReader(shelfName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShelfReader", reflect.TypeOf((*MockReadTx)(nil).GetShelfReader), shelfName)
}
